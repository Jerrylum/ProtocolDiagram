<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.jerryio.protocol_diagram</groupId>
  <artifactId>ProtocolDiagram</artifactId>
  
  <version>0.2.0</version>
  <name>Protocol Diagram</name>
  <inceptionYear>2022</inceptionYear>
  <packaging>jar</packaging>
  
  <description>Protocol Diagram is a command-line editor for researchers and engineers to create ASCII RFC-like header diagrams for their own custom protocols.</description>
  <url>https://github.com/Jerrylum/ProtocolDiagram/</url>
  
  <issueManagement>
    <system>GitHub Issues</system>
    <url>https://github.com/Jerrylum/ProtocolDiagram/issues</url>
  </issueManagement>
  
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>16</maven.compiler.source>
    <maven.compiler.target>16</maven.compiler.target>
  </properties>
  
  <licenses>
    <license>
      <name>GNU General Public License v3.0</name>
      <url>https://github.com/Jerrylum/ProtocolDiagram/blob/main/LICENSE</url>
      <distribution>repo</distribution>
    </license>
  </licenses>
  
  <repositories>
  </repositories>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.beust</groupId>
      <artifactId>jcommander</artifactId>
      <version>1.82</version>
    </dependency>
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>2.9.1</version>
    </dependency>
  </dependencies>
  
  <build>
    <sourceDirectory>${project.basedir}/src/main/java</sourceDirectory>
    <testSourceDirectory>${project.basedir}/src/test/java</testSourceDirectory>
    <defaultGoal>clean package</defaultGoal>
    
    <finalName>protocol_diagram-base</finalName>
    
    <plugins>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.4.2</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
          <finalName>protocol_diagram</finalName>
          <archive>
            <!-- https://stackoverflow.com/questions/9689793/cant-execute-jar-file-no-main-manifest-attribute -->
            <manifest>
              <addClasspath>true</addClasspath>
              <classpathPrefix>lib/</classpathPrefix>
              <mainClass>com.jerryio.protocol_diagram.Main</mainClass>
            </manifest>
          </archive>
          <!-- https://stackoverflow.com/questions/20697144/can-not-set-the-final-jar-name-with-maven-assembly-plugin -->
          <appendAssemblyId>false</appendAssemblyId>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.8</version>
        <executions>
          <execution>
            <id>prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
    
    <resources>
      <resource>
        <directory>${basedir}/src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
  </build>
</project>